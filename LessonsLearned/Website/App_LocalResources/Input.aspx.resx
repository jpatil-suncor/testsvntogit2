<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Additional" xml:space="preserve">
    <value>Additional</value>
    <comment>reverserd with background</comment>
  </data>
  <data name="AdditionalBackground" xml:space="preserve">
    <value>Additional Background</value>
  </data>
  <data name="additionalstatement" xml:space="preserve">
    <value>characters remaining for additional background</value>
  </data>
  <data name="background" xml:space="preserve">
    <value>Background</value>
  </data>
  <data name="BusinessUnit" xml:space="preserve">
    <value>Business Team</value>
  </data>
  <data name="category" xml:space="preserve">
    <value>Category</value>
  </data>
  <data name="fileattachments" xml:space="preserve">
    <value>File Attachments</value>
  </data>
  <data name="FirstName" xml:space="preserve">
    <value>First Name</value>
  </data>
  <data name="frequency" xml:space="preserve">
    <value>Frequency</value>
  </data>
  <data name="helpBackground" xml:space="preserve">
    <value>-   Additional background is optional to help further describe the lesson learned details as necessary.  ie. describing the actual, pertinent facts around the event that caused the lesson to be learned. Vendor and contractor names should be avoided and dates and locations should be excluded unless absolutely necessary for clarity.  Keep it simple with highlights and don't overwhelm the reader.  Provide specific causes if known and avoid judgemental statements.
       &lt;br /&gt;
       &lt;i&gt; Eg. "The EPC contract for the project had no clear definition of what office space means.  As a result, the EPC Contractor charged by the number of desks / phones squeezed into a space rather than for a defined office space.  Clear office space definition is important to ensure that EPC Contractor charges are part of the base contract to prevent misinterpretation or incorrect charges.  Consistency and standardization of costs and policy application, to the extent possible, is also important to ensure billings to Petro-Canada are fair and reasonable".   (87 words) &lt;/i&gt;</value>
  </data>
  <data name="helpFileAttachement" xml:space="preserve">
    <value>only attach unique files that can not be accessed directly by the reader.  The Reference section above should outline how and where the reader can access additional pertinent information. Click on Browse…, select the file you would like to upload and then click on Upload.  Only 2 files can be uploaded</value>
  </data>
  <data name="helpFrequency" xml:space="preserve">
    <value>identify if this is a one time occurrence, has happened 2-4 times on the project or has happened fairly frequently ie. &gt;5 times</value>
  </data>
  <data name="helpImpact" xml:space="preserve">
    <value>If possible, provide the best estimate of the cost impact that the event or events had or could have had using the 7 level financial ruler on the Petro-Canada Corporate TLM Risk Matrix:&gt;100M$, 10M$-100M$, 1M$-10M$, 100K$-1M$, 10K$-100K$, 1K$-10K$, &lt;1K$</value>
  </data>
  <data name="helpPriority" xml:space="preserve">
    <value>If possible, rate the priority of the event from VH/H/M/L/VL using the following guidelines:  VH - Very High opportunity that must be addressed immediately,  H  - High improvement opportunity that should be addressed as soon as possible,  M - Medium improvement opportunity that should be addressed at the next upgrade or publication,  L - minor improvement that might be combined with other upgrades  or VL - very minor improvement that should be considered as part of an overall CI initiative</value>
  </data>
  <data name="helpProcesses" xml:space="preserve">
    <value>Please indicate which processes, project phase and category's (optional) are affected by this Lesson.</value>
  </data>
  <data name="helpRecommendation" xml:space="preserve">
    <value>-  provide a reasonable Recommendation to assist the Process Owner in implementing a change or in publishing a formal Lesson Learned.  Point out what needs to be done to either capture, correct or prevent similar situations in the future.
       &lt;br /&gt;
       &lt;i&gt; Eg. "All Contracts must clearly define "office space" and how their costs will be calculated".&lt;/i&gt;</value>
  </data>
  <data name="helpReference" xml:space="preserve">
    <value>- where possible, provide specific references to help the reader follow up on the information
       &lt;br /&gt;
       &lt;i&gt; Eg. Specification #/ drawing # / standard #, code reference, etc. &lt;/i&gt;</value>
  </data>
  <data name="helpStatement" xml:space="preserve">
    <value>-  the LL statement should also be brief and succinct,  ideally less than 50 words and no more than 100 (300 characters maximum).  The statement describes what was learned and how the lesson can be related to other similar situations.  The statement should provide the reader enough key information to quickly determine if the lesson is applicable to their search.  Acronyms and generic words should be made clear for the reader.&amp;nbsp;
       &lt;i&gt;Eg. "EPC contracts must clearly define that an office means an 8'x10' space (or whatever the specific measurement criteria is) with 4 walls and 1 desk/1phone line.  2 people in 1 office is still 1 office".   (35 words / 95 characters) &lt;/i&gt;</value>
  </data>
  <data name="helpTitle" xml:space="preserve">
    <value>- the title should be a short, informative description, ideally less than 10 words(100 characters maximum). The title must be as specific as possible and capture the reader's attention by identifying and highlighting the primary subject with key words. &lt;br /&gt; &lt;i&gt;Eg. "Office space definition - the importance of clear contract wording".  (9 words / 64 characters) &lt;/i&gt;</value>
  </data>
  <data name="helpType" xml:space="preserve">
    <value>identify which of the following key areas are impacted by this event - 1.Safety 2. Cheaper,Better,Faster 3. Other..</value>
  </data>
  <data name="impact" xml:space="preserve">
    <value>Impact</value>
  </data>
  <data name="LastName" xml:space="preserve">
    <value>Last Name</value>
  </data>
  <data name="LessonTitle" xml:space="preserve">
    <value>Lesson Title</value>
  </data>
  <data name="Location" xml:space="preserve">
    <value>Location</value>
  </data>
  <data name="mandatorystatement" xml:space="preserve">
    <value>Fields in &lt;b&gt;bold&lt;/b&gt; are mandatory and to view helpful information on that item, place your mouse over the     icons</value>
  </data>
  <data name="other" xml:space="preserve">
    <value>other</value>
  </data>
  <data name="PhoneNumber" xml:space="preserve">
    <value>Phone Number</value>
  </data>
  <data name="priority" xml:space="preserve">
    <value>Priority</value>
  </data>
  <data name="processAffected" xml:space="preserve">
    <value>Processes_Affected</value>
  </data>
  <data name="ProjectName" xml:space="preserve">
    <value>Project Name</value>
  </data>
  <data name="projectPhase" xml:space="preserve">
    <value>Project Phase</value>
  </data>
  <data name="recommendations" xml:space="preserve">
    <value>Recommendations</value>
  </data>
  <data name="recommendationsstatement" xml:space="preserve">
    <value>characters remaining for reommendations</value>
  </data>
  <data name="reference" xml:space="preserve">
    <value>References</value>
  </data>
  <data name="referencesstatement" xml:space="preserve">
    <value>characters remaining for reference</value>
  </data>
  <data name="SBU" xml:space="preserve">
    <value>SBU</value>
  </data>
  <data name="Statement" xml:space="preserve">
    <value>Statement</value>
  </data>
  <data name="statementcharacters" xml:space="preserve">
    <value>characters remaining for statement</value>
  </data>
  <data name="titlecharacters" xml:space="preserve">
    <value>characters remaining for title</value>
  </data>
  <data name="type" xml:space="preserve">
    <value>Type</value>
  </data>
</root>